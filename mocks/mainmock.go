// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fs "github.com/kr/fs"
	sftp "github.com/pkg/sftp"
)

// MockSftper is a mock of Sftper interface
type MockSftper struct {
	ctrl     *gomock.Controller
	recorder *MockSftperMockRecorder
}

// MockSftperMockRecorder is the mock recorder for MockSftper
type MockSftperMockRecorder struct {
	mock *MockSftper
}

// NewMockSftper creates a new mock instance
func NewMockSftper(ctrl *gomock.Controller) *MockSftper {
	mock := &MockSftper{ctrl: ctrl}
	mock.recorder = &MockSftperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSftper) EXPECT() *MockSftperMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSftper) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSftperMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSftper)(nil).Close))
}

// Create mocks base method
func (m *MockSftper) Create(path string) (*sftp.File, error) {
	ret := m.ctrl.Call(m, "Create", path)
	ret0, _ := ret[0].(*sftp.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSftperMockRecorder) Create(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSftper)(nil).Create), path)
}

// Lstat mocks base method
func (m *MockSftper) Lstat(p string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "Lstat", p)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat
func (mr *MockSftperMockRecorder) Lstat(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockSftper)(nil).Lstat), p)
}

// Walk mocks base method
func (m *MockSftper) Walk(root string) *fs.Walker {
	ret := m.ctrl.Call(m, "Walk", root)
	ret0, _ := ret[0].(*fs.Walker)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockSftperMockRecorder) Walk(root interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockSftper)(nil).Walk), root)
}

// MockWalker is a mock of Walker interface
type MockWalker struct {
	ctrl     *gomock.Controller
	recorder *MockWalkerMockRecorder
}

// MockWalkerMockRecorder is the mock recorder for MockWalker
type MockWalkerMockRecorder struct {
	mock *MockWalker
}

// NewMockWalker creates a new mock instance
func NewMockWalker(ctrl *gomock.Controller) *MockWalker {
	mock := &MockWalker{ctrl: ctrl}
	mock.recorder = &MockWalkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalker) EXPECT() *MockWalkerMockRecorder {
	return m.recorder
}

// Step mocks base method
func (m *MockWalker) Step() bool {
	ret := m.ctrl.Call(m, "Step")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Step indicates an expected call of Step
func (mr *MockWalkerMockRecorder) Step() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockWalker)(nil).Step))
}

// Err mocks base method
func (m *MockWalker) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockWalkerMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockWalker)(nil).Err))
}

// Path mocks base method
func (m *MockWalker) Path() string {
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockWalkerMockRecorder) Path() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWalker)(nil).Path))
}
