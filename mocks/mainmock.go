// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/FredHutch/sftp_downloader/iface (interfaces: Sftper,Filer,Walker)

// Package mocks is a generated GoMock package.
package mocks

import (
	iface "github.com/FredHutch/sftp_downloader/iface"
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
	reflect "reflect"
)

// MockSftper is a mock of Sftper interface
type MockSftper struct {
	ctrl     *gomock.Controller
	recorder *MockSftperMockRecorder
}

// MockSftperMockRecorder is the mock recorder for MockSftper
type MockSftperMockRecorder struct {
	mock *MockSftper
}

// NewMockSftper creates a new mock instance
func NewMockSftper(ctrl *gomock.Controller) *MockSftper {
	mock := &MockSftper{ctrl: ctrl}
	mock.recorder = &MockSftperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSftper) EXPECT() *MockSftperMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSftper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSftperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSftper)(nil).Close))
}

// Create mocks base method
func (m *MockSftper) Create(arg0 string) (iface.Filer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(iface.Filer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSftperMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSftper)(nil).Create), arg0)
}

// Lstat mocks base method
func (m *MockSftper) Lstat(arg0 string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat
func (mr *MockSftperMockRecorder) Lstat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockSftper)(nil).Lstat), arg0)
}

// Open mocks base method
func (m *MockSftper) Open(arg0 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockSftperMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSftper)(nil).Open), arg0)
}

// ReadDir mocks base method
func (m *MockSftper) ReadDir(arg0 string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir
func (mr *MockSftperMockRecorder) ReadDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockSftper)(nil).ReadDir), arg0)
}

// Walk mocks base method
func (m *MockSftper) Walk(arg0 string) iface.Walker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", arg0)
	ret0, _ := ret[0].(iface.Walker)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockSftperMockRecorder) Walk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockSftper)(nil).Walk), arg0)
}

// MockFiler is a mock of Filer interface
type MockFiler struct {
	ctrl     *gomock.Controller
	recorder *MockFilerMockRecorder
}

// MockFilerMockRecorder is the mock recorder for MockFiler
type MockFilerMockRecorder struct {
	mock *MockFiler
}

// NewMockFiler creates a new mock instance
func NewMockFiler(ctrl *gomock.Controller) *MockFiler {
	mock := &MockFiler{ctrl: ctrl}
	mock.recorder = &MockFilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFiler) EXPECT() *MockFilerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockFiler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFilerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFiler)(nil).Close))
}

// Write mocks base method
func (m *MockFiler) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFilerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFiler)(nil).Write), arg0)
}

// MockWalker is a mock of Walker interface
type MockWalker struct {
	ctrl     *gomock.Controller
	recorder *MockWalkerMockRecorder
}

// MockWalkerMockRecorder is the mock recorder for MockWalker
type MockWalkerMockRecorder struct {
	mock *MockWalker
}

// NewMockWalker creates a new mock instance
func NewMockWalker(ctrl *gomock.Controller) *MockWalker {
	mock := &MockWalker{ctrl: ctrl}
	mock.recorder = &MockWalkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalker) EXPECT() *MockWalkerMockRecorder {
	return m.recorder
}

// Err mocks base method
func (m *MockWalker) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockWalkerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockWalker)(nil).Err))
}

// Path mocks base method
func (m *MockWalker) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockWalkerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWalker)(nil).Path))
}

// Step mocks base method
func (m *MockWalker) Step() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Step indicates an expected call of Step
func (mr *MockWalkerMockRecorder) Step() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockWalker)(nil).Step))
}
